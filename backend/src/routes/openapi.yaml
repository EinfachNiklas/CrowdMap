openapi: 3.1.0
info:
  title: event-app-api
  version: 1.0.0
security:
  - AccessTokenAuth: []
components:
  securitySchemes:
    AccessTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshTokenCookieAuth:
      type: apiKey
      in: cookie
      name: refresh
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        details:
          type: string
      required: [message, timestamp]
    UsersPostBody:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        pwd:
          type: string
      required: [username, email, pwd]
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, username, email, createdAt]
      additionalProperties: false
    AuthLoginPostBody:
      type: object
      properties:
        email:
          type: string
          format: email
        pwd:
          type: string
      required: [email, pwd]
      additionalProperties: false
    AuthToken:
      type: object
      properties:
        authToken:
          type: string
      required: [authToken]
      additionalProperties: false

paths:
  /users:
    post:
      tags: [Users]
      deprecated: false
      description: Creates new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersPostBody"
      responses:
        "201":
          description: User created successfully
          headers:
            Location:
              description: URL of created user
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "409":
          description: Username or Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/search:
    get:
      tags: [Users]
      deprecated: false
      description: Retrieves users matching username and/or email
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: username query
        - in: query
          name: email
          schema:
            type: string
          required: false
          description: email query

      responses:
        "200":
          description: Returned all found users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: No query provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/search/{id}:
    get:
      tags: [Users]
      deprecated: false
      description: Retrieves user by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID

      responses:
        "200":
          description: Entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: no entries found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/login:
    post:
      tags: [Auth]
      deprecated: false
      description: Authenticates user, sets refresh cookie and returns auth token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginPostBody"
      responses:
        "200":
          description: Successfully authenticated
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie; path is `/auth/refresh`. May be `Secure` in production.
              schema:
                type: string
                example: refresh=eyJ...; Path=/auth/refresh; HttpOnly; Secure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/refresh:
    post:
      tags: [Auth]
      deprecated: false
      description: Issues new auth token and sets a new refresh cookie
      security:
        - refreshTokenCookieAuth: []
      responses:
        "200":
          description: Successfully issued new auth token
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/logout:
    post:
      tags: [Auth]
      deprecated: false
      description: Logs out user and clears refresh cookie
      security:
        - refreshTokenCookieAuth: []
        - AccessTokenAuth: []
      responses:
        "200":
          description: Logged out successfully
          headers:
            Set-Cookie:
              description: Clears the HTTP-only refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
