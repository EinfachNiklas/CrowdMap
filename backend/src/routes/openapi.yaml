openapi: 3.1.0
info:
  title: CrowdMap-API
  version: 1.0.0
security:
  - AccessTokenAuth: []
components:
  securitySchemes:
    AccessTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshTokenCookieAuth:
      type: apiKey
      in: cookie
      name: refresh
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      required: [message, timestamp]
    UsersPostBody:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        pwd:
          type: string
      required: [username, email, pwd]
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, username, email, createdAt]
      additionalProperties: false
    UsersAvailability:
      type: object
      properties:
        username:
          type: object
          properties:
            available:
              type: boolean
          required: [available]
          additionalProperties: false
        email:
          type: object
          properties:
            available:
              type: boolean
          required: [available]
          additionalProperties: false
        timestamp:
          type: string
          format: date-time
      required: [username, email, timestamp]
      additionalProperties: false
    AuthLoginPostBody:
      type: object
      properties:
        email:
          type: string
          format: email
        pwd:
          type: string
      required: [email, pwd]
      additionalProperties: false
    AuthToken:
      type: object
      properties:
        authToken:
          type: string
      required: [authToken]
      additionalProperties: false
    GeocodingCoordinatesResponse:
      type: object
      properties:
        lat:
          type: number
        lon:
          type: number
      required: [lat, lon]
      additionalProperties: false
    CrowdEventPostBody:
      type: object
      properties:
        title:
          type: string
        lat:
          type: number
        lon:
          type: number
      required: [title, lat, lon]
      additionalProperties: false
    CrowdEvent:
      type: object
      properties:
        crowdEventId:
          type: string
          format: uuid
        title:
          type: string
        lat:
          type: number
        lon:
          type: number
        createdBy:
          type: integer
      required: [crowdEventId, title, lat, lon, createdBy]
      additionalProperties: false

paths:
  /users:
    post:
      tags: [Users]
      deprecated: false
      description: Creates new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersPostBody"
      responses:
        "201":
          description: User created successfully
          headers:
            Location:
              description: URL of created user
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "409":
          description: Username or Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/availability:
    get:
      tags: [Users]
      deprecated: false
      description: Checks availability of username and/or email
      security: []
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: username to check
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: false
          description: email to check
      responses:
        "200":
          description: Returned availability result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersAvailability"
        "400":
          description: No query provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/search/{id}:
    get:
      tags: [Users]
      deprecated: false
      description: Retrieves user by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID

      responses:
        "200":
          description: Entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: no entries found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/login:
    post:
      tags: [Auth]
      deprecated: false
      description: Authenticates user, sets refresh cookie and returns auth token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLoginPostBody"
      responses:
        "200":
          description: Successfully authenticated
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie; path is `/auth/refresh`. May be `Secure` in production.
              schema:
                type: string
                example: refresh=eyJ...; Path=/api/auth/refresh; HttpOnly; Secure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/refresh:
    post:
      tags: [Auth]
      deprecated: false
      description: Issues new auth token and sets a new refresh cookie
      security:
        - refreshTokenCookieAuth: []
      responses:
        "200":
          description: Successfully issued new auth token
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/logout:
    post:
      tags: [Auth]
      deprecated: false
      description: Logs out user and clears refresh cookie
      security:
        - refreshTokenCookieAuth: []
        - AccessTokenAuth: []
      responses:
        "200":
          description: Logged out successfully
          headers:
            Set-Cookie:
              description: Clears the HTTP-only refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/validate:
    get:
      tags: [Auth]
      deprecated: false
      description: Checks validity of authToken
      responses:
        "200":
          description: AuthToken is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: AuthToken is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /geocoding/coordinates/query:
    get:
      tags: [Geocoding]
      deprecated: false
      description: Returns coordinates for a location query
      security: []
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Free-text location to geocode
      responses:
        "200":
          description: Coordinates resolved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeocodingCoordinatesResponse"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /geocoding/coordinates/ip:
    get:
      tags: [Geocoding]
      deprecated: false
      description: Returns coordinates derived from the client's IP address
      security: []
      responses:
        "200":
          description: Coordinates resolved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeocodingCoordinatesResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /crowdEvents:
    post:
      tags: [CrowdEvents]
      deprecated: false
      description: Creates a new crowd event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrowdEventPostBody"
      responses:
        "201":
          description: CrowdEvent created successfully
          headers:
            Location:
              description: URL of created event
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrowdEvent"
        "400":
          description: Missing fields or invalid types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /crowdEvents/{id}:
    get:
      tags: [CrowdEvents]
      deprecated: false
      description: Retrieves a crowd event by id
      security: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: CrowdEvent ID
      responses:
        "200":
          description: Entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrowdEvent"
        "404":
          description: no entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /crowdEvents/{id}/upvote:
    post:
      tags: [CrowdEvents]
      deprecated: false
      description: Adds an upvote to a crowd event
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: CrowdEvent ID
      responses:
        "200":
          description: Vote stored
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: no entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /crowdEvents/{id}/downvote:
    post:
      tags: [CrowdEvents]
      deprecated: false
      description: Adds a downvote to a crowd event
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: CrowdEvent ID
      responses:
        "200":
          description: Vote stored
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: no entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
